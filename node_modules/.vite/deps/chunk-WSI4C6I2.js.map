{
  "version": 3,
  "sources": ["../../vue-adblock-detector/src/helpers.js", "../../vue-adblock-detector/src/detectDomAdblocker.js", "../../vue-adblock-detector/src/detectAnyAdblocker.js"],
  "sourcesContent": ["/**\r\n * Take a function that normally return a primitive value (ex: Boolean)\r\n * and return a function that return a Promise instead\r\n */\r\nexport function valueOutputToPromise(func) {\r\n  return function() {\r\n    var args = arguments;\r\n    return new Promise(function(resolve, reject) {\r\n      var result = func.apply(this, args);\r\n      resolve(result);\r\n    });\r\n  };\r\n}\r\n\r\n/**\r\n * Wraps a function so it indicate that it is deprecated\r\n */\r\nexport function wrapDeprecated(func, message){\r\n  return function() {\r\n    console.warn('just-detect-adblock : ' + (message || 'This method is deprecated.'));\r\n    return func.apply(this, arguments);\r\n  };\r\n};\r\n\r\n/**\r\n * Check if Brave is the current browser\r\n * @return Boolean\r\n */\r\nexport function isBraveBrowser(){\r\n  return typeof navigator.brave !== 'undefined' && typeof navigator.brave.isBrave !== 'undefined';\r\n};\r\n\r\n/**\r\n * Check if Opera is the current browser\r\n * @return Boolean\r\n */\r\nexport function isOperaBrowser(){\r\n  return typeof navigator.userAgent === 'string' && navigator.userAgent.match(/Opera|OPR\\//);\r\n};\r\n\r\n/**\r\n * Create a DOM element that should be seen as an ad by adblockers\r\n * @return DOM element\r\n */\r\nexport function createBaitElement(){\r\n  var bait = document.createElement('div');\r\n\r\n  bait.setAttribute('class', 'pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links ad-text adSense adBlock adContent adBanner');\r\n  bait.setAttribute('style', 'width: 1px !important; height: 1px !important; position: absolute !important; left: -10000px !important; top: -1000px !important;');\r\n\r\n  return bait;\r\n};\r\n\r\n/**\r\n * Check if a DOM element seems to be blocked by an adblocker or not\r\n * @return Boolean\r\n */\r\nexport function doesElementIsBlocked(elem){\r\n  if(elem.offsetParent === null\r\n  || elem.offsetHeight == 0\r\n  || elem.offsetLeft == 0\r\n  || elem.offsetTop == 0\r\n  || elem.offsetWidth == 0\r\n  || elem.clientHeight == 0\r\n  || elem.clientWidth == 0) {\r\n    return true;\r\n  } else if(window.getComputedStyle !== undefined) {\r\n    var elemCS = window.getComputedStyle(elem, null);\r\n    if(elemCS && (elemCS.getPropertyValue('display') == 'none' || elemCS.getPropertyValue('visibility') == 'hidden')) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n * Create and execute an XMLHttpRequest that should be blocked by an adblocker\r\n * @return Promise\r\n */\r\nexport function createBaitRequest() {\r\n  return new Promise(function(resolve, reject) {\r\n    var xhttp = new XMLHttpRequest();\r\n    xhttp.onreadystatechange = function() {\r\n      if(xhttp.readyState == 4) {\r\n        resolve(xhttp);\r\n      }\r\n    };\r\n\r\n    // let's hope github is okay with me fetching a file on their server like that :)\r\n    // NOTE : it will generate traffic only when brave shields are off tho,\r\n    // because the request is not actually sent when the url is being blocked\r\n    xhttp.open('GET', 'https://raw.githubusercontent.com/wmcmurray/just-detect-adblock/master/baits/pagead2.googlesyndication.com', true);\r\n    xhttp.send();\r\n  });\r\n}\r\n\r\n// NOTE : brave seems to let blocked requests return a valid HTTP status code,\r\n// but the content returned is empty, so we check if we see the content that we know is in our bait file\r\nexport function doesBaitRequestIsBlockedByBrave(xhttp) {\r\n  return xhttp.status === 200 && !xhttp.responseText.match(/^thistextshouldbethere(\\n|)$/);\r\n}\r\n\r\n// NOTE : opera seems to set the HTTP status code to 0\r\n// and empty content, so we check if we see the content that we know is in our bait file\r\nexport function doesBaitRequestIsBlockedByOpera(xhttp) {\r\n  return xhttp.status === 0 && !xhttp.responseText.match(/^thistextshouldbethere(\\n|)$/);\r\n}\r\n", "import { createBaitElement, doesElementIsBlocked } from './helpers.js'\r\n\r\n/**\r\n * Detect if an ad blocker is blocking ads in the DOM itself\r\n * @return Boolean\r\n */\r\nexport default function detectDomAdblocker(){\r\n  // that's a legacy Ad Block Plus check I suppose ?\r\n  // I don't think this attribute is set anymore, but I am keeping it anyway\r\n  if(window.document.body.getAttribute('abp') !== null) {\r\n    return true;\r\n  }\r\n\r\n  // try to lure adblockers into a trap\r\n  var bait = createBaitElement();\r\n  window.document.body.appendChild(bait);\r\n  var detected = doesElementIsBlocked(bait);\r\n  window.document.body.removeChild(bait);\r\n\r\n  return detected;\r\n};\r\n", "import { isOperaBrowser, isBraveBrowser, createBaitRequest, doesBaitRequestIsBlockedByOpera, doesBaitRequestIsBlockedByBrave } from './helpers.js'\r\nimport detectDomAdblocker from './detectDomAdblocker.js'\r\n\r\n/**\r\n * Detect if any known ad blocker mechanism is detected\r\n * @return Promise\r\n */\r\nexport default function detectAnyAdblocker(){\r\n  return new Promise(function(resolve, reject) {\r\n    // check dom adblockers first\r\n    if(detectDomAdblocker()) {\r\n      return resolve(true);\r\n    }\r\n\r\n    // then check request adblockers (using only one request for all)\r\n    if(isBraveBrowser() || isOperaBrowser()) {\r\n      createBaitRequest().then(function(xhttp) {\r\n        // brave\r\n        if(isBraveBrowser()) {\r\n          return resolve( doesBaitRequestIsBlockedByBrave(xhttp) );\r\n        }\r\n        // opera\r\n        if(isOperaBrowser()) {\r\n          return resolve( doesBaitRequestIsBlockedByOpera(xhttp) );\r\n        }\r\n\r\n        resolve(false);\r\n      });\r\n    } else {\r\n      resolve(false);\r\n    }\r\n  });\r\n};\r\n"],
  "mappings": ";AAIO,SAAS,qBAAqB,MAAM;AACzC,SAAO,WAAW;AAChB,QAAI,OAAO;AACX,WAAO,IAAI,QAAQ,SAAS,SAAS,QAAQ;AAC3C,UAAI,SAAS,KAAK,MAAM,MAAM,IAAI;AAClC,cAAQ,MAAM;AAAA,IAChB,CAAC;AAAA,EACH;AACF;AAKO,SAAS,eAAe,MAAM,SAAQ;AAC3C,SAAO,WAAW;AAChB,YAAQ,KAAK,4BAA4B,WAAW,6BAA6B;AACjF,WAAO,KAAK,MAAM,MAAM,SAAS;AAAA,EACnC;AACF;AAMO,SAAS,iBAAgB;AAC9B,SAAO,OAAO,UAAU,UAAU,eAAe,OAAO,UAAU,MAAM,YAAY;AACtF;AAMO,SAAS,iBAAgB;AAC9B,SAAO,OAAO,UAAU,cAAc,YAAY,UAAU,UAAU,MAAM,aAAa;AAC3F;AAMO,SAAS,oBAAmB;AACjC,MAAI,OAAO,SAAS,cAAc,KAAK;AAEvC,OAAK,aAAa,SAAS,uIAAuI;AAClK,OAAK,aAAa,SAAS,mIAAmI;AAE9J,SAAO;AACT;AAMO,SAAS,qBAAqB,MAAK;AACxC,MAAG,KAAK,iBAAiB,QACtB,KAAK,gBAAgB,KACrB,KAAK,cAAc,KACnB,KAAK,aAAa,KAClB,KAAK,eAAe,KACpB,KAAK,gBAAgB,KACrB,KAAK,eAAe,GAAG;AACxB,WAAO;AAAA,EACT,WAAU,OAAO,qBAAqB,QAAW;AAC/C,QAAI,SAAS,OAAO,iBAAiB,MAAM,IAAI;AAC/C,QAAG,WAAW,OAAO,iBAAiB,SAAS,KAAK,UAAU,OAAO,iBAAiB,YAAY,KAAK,WAAW;AAChH,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAMO,SAAS,oBAAoB;AAClC,SAAO,IAAI,QAAQ,SAAS,SAAS,QAAQ;AAC3C,QAAI,QAAQ,IAAI,eAAe;AAC/B,UAAM,qBAAqB,WAAW;AACpC,UAAG,MAAM,cAAc,GAAG;AACxB,gBAAQ,KAAK;AAAA,MACf;AAAA,IACF;AAKA,UAAM,KAAK,OAAO,8GAA8G,IAAI;AACpI,UAAM,KAAK;AAAA,EACb,CAAC;AACH;AAIO,SAAS,gCAAgC,OAAO;AACrD,SAAO,MAAM,WAAW,OAAO,CAAC,MAAM,aAAa,MAAM,8BAA8B;AACzF;AAIO,SAAS,gCAAgC,OAAO;AACrD,SAAO,MAAM,WAAW,KAAK,CAAC,MAAM,aAAa,MAAM,8BAA8B;AACvF;;;ACrGe,SAAR,qBAAqC;AAG1C,MAAG,OAAO,SAAS,KAAK,aAAa,KAAK,MAAM,MAAM;AACpD,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,kBAAkB;AAC7B,SAAO,SAAS,KAAK,YAAY,IAAI;AACrC,MAAI,WAAW,qBAAqB,IAAI;AACxC,SAAO,SAAS,KAAK,YAAY,IAAI;AAErC,SAAO;AACT;;;ACbe,SAAR,qBAAqC;AAC1C,SAAO,IAAI,QAAQ,SAAS,SAAS,QAAQ;AAE3C,QAAG,mBAAmB,GAAG;AACvB,aAAO,QAAQ,IAAI;AAAA,IACrB;AAGA,QAAG,eAAe,KAAK,eAAe,GAAG;AACvC,wBAAkB,EAAE,KAAK,SAAS,OAAO;AAEvC,YAAG,eAAe,GAAG;AACnB,iBAAO,QAAS,gCAAgC,KAAK,CAAE;AAAA,QACzD;AAEA,YAAG,eAAe,GAAG;AACnB,iBAAO,QAAS,gCAAgC,KAAK,CAAE;AAAA,QACzD;AAEA,gBAAQ,KAAK;AAAA,MACf,CAAC;AAAA,IACH,OAAO;AACL,cAAQ,KAAK;AAAA,IACf;AAAA,EACF,CAAC;AACH;",
  "names": []
}
