// node_modules/vue-adblock-detector/src/helpers.js
function valueOutputToPromise(func) {
  return function() {
    var args = arguments;
    return new Promise(function(resolve, reject) {
      var result = func.apply(this, args);
      resolve(result);
    });
  };
}
function wrapDeprecated(func, message) {
  return function() {
    console.warn("just-detect-adblock : " + (message || "This method is deprecated."));
    return func.apply(this, arguments);
  };
}
function isBraveBrowser() {
  return typeof navigator.brave !== "undefined" && typeof navigator.brave.isBrave !== "undefined";
}
function isOperaBrowser() {
  return typeof navigator.userAgent === "string" && navigator.userAgent.match(/Opera|OPR\//);
}
function createBaitElement() {
  var bait = document.createElement("div");
  bait.setAttribute("class", "pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links ad-text adSense adBlock adContent adBanner");
  bait.setAttribute("style", "width: 1px !important; height: 1px !important; position: absolute !important; left: -10000px !important; top: -1000px !important;");
  return bait;
}
function doesElementIsBlocked(elem) {
  if (elem.offsetParent === null || elem.offsetHeight == 0 || elem.offsetLeft == 0 || elem.offsetTop == 0 || elem.offsetWidth == 0 || elem.clientHeight == 0 || elem.clientWidth == 0) {
    return true;
  } else if (window.getComputedStyle !== void 0) {
    var elemCS = window.getComputedStyle(elem, null);
    if (elemCS && (elemCS.getPropertyValue("display") == "none" || elemCS.getPropertyValue("visibility") == "hidden")) {
      return true;
    }
  }
  return false;
}
function createBaitRequest() {
  return new Promise(function(resolve, reject) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (xhttp.readyState == 4) {
        resolve(xhttp);
      }
    };
    xhttp.open("GET", "https://raw.githubusercontent.com/wmcmurray/just-detect-adblock/master/baits/pagead2.googlesyndication.com", true);
    xhttp.send();
  });
}
function doesBaitRequestIsBlockedByBrave(xhttp) {
  return xhttp.status === 200 && !xhttp.responseText.match(/^thistextshouldbethere(\n|)$/);
}
function doesBaitRequestIsBlockedByOpera(xhttp) {
  return xhttp.status === 0 && !xhttp.responseText.match(/^thistextshouldbethere(\n|)$/);
}

// node_modules/vue-adblock-detector/src/detectDomAdblocker.js
function detectDomAdblocker() {
  if (window.document.body.getAttribute("abp") !== null) {
    return true;
  }
  var bait = createBaitElement();
  window.document.body.appendChild(bait);
  var detected = doesElementIsBlocked(bait);
  window.document.body.removeChild(bait);
  return detected;
}

// node_modules/vue-adblock-detector/src/detectAnyAdblocker.js
function detectAnyAdblocker() {
  return new Promise(function(resolve, reject) {
    if (detectDomAdblocker()) {
      return resolve(true);
    }
    if (isBraveBrowser() || isOperaBrowser()) {
      createBaitRequest().then(function(xhttp) {
        if (isBraveBrowser()) {
          return resolve(doesBaitRequestIsBlockedByBrave(xhttp));
        }
        if (isOperaBrowser()) {
          return resolve(doesBaitRequestIsBlockedByOpera(xhttp));
        }
        resolve(false);
      });
    } else {
      resolve(false);
    }
  });
}

export {
  valueOutputToPromise,
  wrapDeprecated,
  isBraveBrowser,
  isOperaBrowser,
  createBaitRequest,
  doesBaitRequestIsBlockedByBrave,
  doesBaitRequestIsBlockedByOpera,
  detectDomAdblocker,
  detectAnyAdblocker
};
//# sourceMappingURL=chunk-WSI4C6I2.js.map
