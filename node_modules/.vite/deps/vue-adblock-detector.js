import "./chunk-DA74IYYC.js";

// node_modules/vue-adblock-detector/dist/bundle.esm.js
function t() {
  return void 0 !== navigator.brave && void 0 !== navigator.brave.isBrave;
}
function e() {
  return "string" == typeof navigator.userAgent && navigator.userAgent.match(/Opera|OPR\//);
}
function n() {
  return new Promise(function(t2, e2) {
    var n2 = new XMLHttpRequest();
    n2.onreadystatechange = function() {
      4 == n2.readyState && t2(n2);
    }, n2.open("GET", "https://raw.githubusercontent.com/wmcmurray/just-detect-adblock/master/baits/pagead2.googlesyndication.com", true), n2.send();
  });
}
function r(t2) {
  return 200 === t2.status && !t2.responseText.match(/^thistextshouldbethere(\n|)$/);
}
function o(t2) {
  return 0 === t2.status && !t2.responseText.match(/^thistextshouldbethere(\n|)$/);
}
function i() {
  if (null !== window.document.body.getAttribute("abp"))
    return true;
  var t2 = function() {
    var t3 = document.createElement("div");
    return t3.setAttribute("class", "pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links ad-text adSense adBlock adContent adBanner"), t3.setAttribute("style", "width: 1px !important; height: 1px !important; position: absolute !important; left: -10000px !important; top: -1000px !important;"), t3;
  }();
  window.document.body.appendChild(t2);
  var e2 = function(t3) {
    if (null === t3.offsetParent || 0 == t3.offsetHeight || 0 == t3.offsetLeft || 0 == t3.offsetTop || 0 == t3.offsetWidth || 0 == t3.clientHeight || 0 == t3.clientWidth)
      return true;
    if (void 0 !== window.getComputedStyle) {
      var e3 = window.getComputedStyle(t3, null);
      if (e3 && ("none" == e3.getPropertyValue("display") || "hidden" == e3.getPropertyValue("visibility")))
        return true;
    }
    return false;
  }(t2);
  return window.document.body.removeChild(t2), e2;
}
var a;
var u = { detectAnyAdblocker: function() {
  return new Promise(function(a2, u2) {
    if (i())
      return a2(true);
    t() || e() ? n().then(function(n2) {
      return t() ? a2(r(n2)) : e() ? a2(o(n2)) : void a2(false);
    }) : a2(false);
  });
}, detectDomAdblocker: (a = i, function() {
  var t2 = arguments;
  return new Promise(function(e2, n2) {
    e2(a.apply(this, t2));
  });
}), detectBraveShields: function() {
  return new Promise(function(e2, o2) {
    t() ? n().then(function(t2) {
      e2(r(t2));
    }) : e2(false);
  });
}, detectOperaAdblocker: function() {
  return new Promise(function(t2, r2) {
    e() ? n().then(function(e2) {
      t2(o(e2));
    }) : t2(false);
  });
}, isDetected: function(t2, e2) {
  return function() {
    return console.warn("just-detect-adblock : " + (e2 || "This method is deprecated.")), t2.apply(this, arguments);
  };
}(i, "The `isDetected()` method is now deprecated, please use `detectAnyAdblocker()` instead, which returns a Promise and can detect more stuff (like Brave Shields).") };
var bundle_esm_default = u;
export {
  bundle_esm_default as default
};
//# sourceMappingURL=vue-adblock-detector.js.map
